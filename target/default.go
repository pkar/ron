// Code generated by go-bindata.
// sources:
// target/default.yaml
// DO NOT EDIT!

package target

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _targetDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x21\x04\x7c\x08\xb2\x09\xff\x4f\x0f\xba\x89\xd4\x24\xa1\x69\x1a\x1c\xa7\x97\x52\x8c\x62\x29\xb6\xc1\x96\x8c\x24\xc7\x84\xa6\xef\x5e\x2c\x87\x5e\x7a\x9b\xd9\x1d\xbe\x65\x47\xaa\xab\xa5\x01\x40\xc0\x0e\x07\x0a\xa3\xd5\x64\xd2\xd5\x86\x82\xb7\xe2\xe9\xbf\xf7\xab\x53\xfa\xbc\x4d\x29\x16\xdd\x20\xfc\xe0\xb4\x67\xaf\x09\xc5\xa2\x57\xbc\x95\xb8\xc3\x19\x84\x1f\xb4\xef\x3a\x69\xe8\x67\x38\xea\x46\x0f\x5e\xfb\xf8\x81\xad\x5e\xd8\x3a\xc9\xdf\x93\xf4\xb8\x7d\xdb\x53\x2c\xca\xda\x41\x48\x5b\x98\xfa\x2c\x41\x08\x6f\x06\x7e\xb3\x20\x44\xd4\xc6\xdd\x40\x88\xe3\xa5\x7d\x70\x49\x88\x30\x9f\x38\x19\x5b\x53\x5c\x97\xd1\x32\xfa\xe7\xfd\x8e\x65\xc9\x31\xcb\x4f\xe9\x8e\x62\x56\x39\xd7\x59\x1a\xc7\x65\xed\xaa\xfe\x1c\x15\xba\x8d\xfb\xce\xd6\x65\xe5\x62\xa3\x55\x6c\x64\x23\xb9\x95\x36\x16\x7a\x50\x8d\xe6\x22\x9e\x67\x6c\x3d\xae\xc8\xfc\xcb\xff\xf3\x4d\xc6\xc9\x2c\x70\xdc\x94\xd2\xf9\x5e\xf2\x4a\x36\x8d\x1e\x15\x50\xb4\x82\xe2\xee\x25\x20\x8b\x4a\x63\x33\x2e\x03\xe0\xdc\x9b\xb2\x57\xe2\x36\xe5\xa6\xb7\x3a\x57\x6b\x45\xa7\x08\x2e\x46\xb7\x63\xb9\x91\x0f\xf0\x8b\x93\x86\x3e\x40\xe4\x71\xe3\xef\x09\xa3\xd5\x2f\x39\xf8\x09\x00\x00\xff\xff\x0c\x19\xd4\x28\xa9\x01\x00\x00")

func targetDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_targetDefaultYaml,
		"target/default.yaml",
	)
}

func targetDefaultYaml() (*asset, error) {
	bytes, err := targetDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "target/default.yaml", size: 425, mode: os.FileMode(416), modTime: time.Unix(1510963621, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"target/default.yaml": targetDefaultYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"target": &bintree{nil, map[string]*bintree{
		"default.yaml": &bintree{targetDefaultYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

